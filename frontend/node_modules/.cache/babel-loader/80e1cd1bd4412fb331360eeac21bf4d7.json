{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amira\\\\Desktop\\\\codiPlatform\\\\app\\\\frontend\\\\src\\\\Components\\\\Auth\\\\Auth.js\",\n    _s = $RefreshSig$();\n\n// import package\nimport React from 'react'; // import google & github login \n\nimport { GoogleLogin } from 'react-google-login';\nimport LoginGithub from 'react-login-github'; // import helper\n\nimport { authenticate, isAuth } from '../../helpers/auth'; // import axios\n\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Auth = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const history = useHistory(); // send google token\n\n  const sendGoogleToken = tokenId => {\n    axios.post(`http://localhost:7000/api/googlelogin`, {\n      idToken: tokenId\n    }).then(res => {\n      console.log(res.data);\n      history.push('/project');\n    }).catch(error => {\n      console.log('GOOGLE SIGNIN ERROR', error.response);\n    });\n  };\n\n  const informParent = response => {\n    authenticate(response, () => {\n      isAuth() && isAuth().role === 'admin' ? history.push('/admin') : history.push('/private');\n    });\n  }; // send github token\n\n\n  const sendGithubToken = (client_id, code, client_secret) => {\n    axios.post(`http://localhost:7000/api/githublogin`, {\n      client_id,\n      code,\n      client_secret\n    }).then(res => {\n      console.log(res.data); //informParent(res);\n    }).catch(error => {\n      console.log('GITHUB SIGNIN ERROR', error.response);\n    });\n  }; // handle google\n\n\n  const googleSuccess = response => {\n    const result = response === null || response === void 0 ? void 0 : response.profileObj;\n    const token = response === null || response === void 0 ? void 0 : response.tokenId;\n    console.log(response);\n    sendGoogleToken(response.tokenId);\n    dispatch({\n      type: AUTH,\n      data: {\n        result,\n        token\n      }\n    });\n  };\n\n  const googleError = () => alert('Google Sign In was unsuccessful. Try again later'); // handle Github\n\n\n  const githubSuccess = async response => {\n    try {\n      const {\n        client_secret,\n        code,\n        client_id\n      } = response;\n      const res = await axios.post(`http://localhost:7000/api/githublogin`, {\n        client_secret,\n        code,\n        client_id\n      }); //sendGithubToken(response.client_secret, response.code, response.client_id)\n      //console.log(res)\n\n      const result = res.data;\n      console.log(result);\n      const token = response === null || response === void 0 ? void 0 : response.token;\n      dispatch({\n        type: AUTH,\n        data: {\n          result,\n          token\n        }\n      });\n      history.push('/project');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const githubFailure = response => alert('Github Sign In was unsuccessful. Try again later');\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GoogleLogin, {\n      clientId: \"998922049920-3bhfhk05ff2nb9ivp1h811hhin6ilkgk.apps.googleusercontent.com\",\n      onSuccess: googleSuccess,\n      onFailure: googleError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LoginGithub, {\n      clientId: `e8db77544d2e4e9ab741`,\n      buttonText: \"Login with Github\",\n      onSuccess: githubSuccess,\n      onFailure: githubFailure,\n      className: \"icon-github\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Auth, \"FxNkVwM1QRg2/kU3+RDi4ll7EAM=\", true);\n\n_c = Auth;\nexport default Auth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["C:/Users/Amira/Desktop/codiPlatform/app/frontend/src/Components/Auth/Auth.js"],"names":["React","GoogleLogin","LoginGithub","authenticate","isAuth","axios","Auth","dispatch","useDispatch","history","useHistory","sendGoogleToken","tokenId","post","idToken","then","res","console","log","data","push","catch","error","response","informParent","role","sendGithubToken","client_id","code","client_secret","googleSuccess","result","profileObj","token","type","AUTH","googleError","alert","githubSuccess","githubFailure"],"mappings":"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","sourcesContent":["// import package\r\nimport React from 'react'\r\n\r\n\r\n// import google & github login \r\nimport { GoogleLogin } from 'react-google-login';\r\nimport LoginGithub from 'react-login-github';\r\n\r\n// import helper\r\nimport { authenticate, isAuth } from '../../helpers/auth';\r\n\r\n\r\n// import axios\r\nimport axios from 'axios';\r\n\r\n\r\nconst Auth = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  \r\n  // send google token\r\n  const sendGoogleToken = tokenId => {\r\n    axios\r\n      .post(`http://localhost:7000/api/googlelogin`, {\r\n        idToken: tokenId\r\n      })\r\n      .then(res => {\r\n        console.log(res.data);\r\n        history.push('/project')\r\n      })\r\n      .catch(error => {\r\n        console.log('GOOGLE SIGNIN ERROR', error.response);\r\n      });\r\n  };\r\n  const informParent = response => {\r\n    authenticate(response, () => {\r\n      isAuth() && isAuth().role === 'admin'\r\n        ? history.push('/admin')\r\n        : history.push('/private');\r\n    });\r\n  };\r\n\r\n// send github token\r\nconst sendGithubToken = (client_id, code, client_secret) => {\r\n  axios\r\n    .post(`http://localhost:7000/api/githublogin`, {\r\n      client_id, \r\n      code,\r\n      client_secret\r\n      \r\n    })\r\n    .then(res => {\r\n      console.log(res.data);\r\n      //informParent(res);\r\n    })\r\n    .catch(error => {\r\n      console.log('GITHUB SIGNIN ERROR', error.response);\r\n    });\r\n};\r\n      // handle google\r\n    const googleSuccess = response => {\r\n    const result = response?.profileObj;\r\n    const token = response?.tokenId;\r\n        console.log(response);\r\n        sendGoogleToken(response.tokenId);\r\n        dispatch({ type: AUTH, data: { result, token } });\r\n\r\n      };\r\n\r\n    const googleError = () => \r\n     alert('Google Sign In was unsuccessful. Try again later');\r\n\r\n\r\n\r\n     // handle Github\r\n      const githubSuccess = async(response) => {\r\n        try{\r\n            const { client_secret, code, client_id} = response\r\n            const res = await axios.post(`http://localhost:7000/api/githublogin`, \r\n            {client_secret, code, client_id})\r\n          //sendGithubToken(response.client_secret, response.code, response.client_id)\r\n//console.log(res)\r\n          const result =res.data;\r\n          console.log(result)\r\n\r\n  \r\n          const token = response?.token;\r\n\r\n          dispatch({ type: AUTH, data: { result, token } })\r\n\r\n          history.push('/project')\r\n        \r\n        }\r\n        catch (error) {\r\n          console.log(error);\r\n      }\r\n      }\r\n      const githubFailure = response =>\r\n      alert('Github Sign In was unsuccessful. Try again later');\r\n\r\n\r\n  return (\r\n    <div>\r\n      \r\n      <GoogleLogin\r\n          clientId=\"998922049920-3bhfhk05ff2nb9ivp1h811hhin6ilkgk.apps.googleusercontent.com\"\r\n          onSuccess={googleSuccess}\r\n          onFailure={googleError}\r\n          \r\n/>  \r\n      <LoginGithub\r\n          clientId={`e8db77544d2e4e9ab741`}\r\n          buttonText=\"Login with Github\"\r\n          onSuccess={githubSuccess}\r\n          onFailure={githubFailure}\r\n          className=\"icon-github\"\r\n        \r\n   ></LoginGithub>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Auth\r\n"]},"metadata":{},"sourceType":"module"}