{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amira\\\\Desktop\\\\codiPlatform\\\\app\\\\frontend\\\\src\\\\Components\\\\Navbar\\\\Navbar.js\",\n    _s = $RefreshSig$();\n\n// Ã¯mport package react\nimport React, { useState, useEffect } from 'react';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport decode from 'jwt-decode';\nimport { toast } from 'react-toast';\nimport { AUTH } from '../../JS/actionsTypes/actionAuth';\nimport { useSelector } from 'react-redux'; // import google & github login \n\nimport { GoogleLogin } from 'react-google-login';\nimport LoginGithub from 'react-login-github'; // import axios\n\nimport axios from 'axios';\nimport { authenticate, isAuth } from '../../helpers/auth';\nimport { LOGOUT } from '../../JS/actionsTypes/actionAuth'; // import CSS\n\nimport { AppBar, Typography, Toolbar, Avatar, Button } from '@material-ui/core';\nimport './Navbar.css';\nimport useStyles from './styles'; // import logo\n\nimport logo from \"../../Assets/logo.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GITHUB_CLIENT_ID = \"e8db77544d2e4e9ab741\";\nconst gitHubRedirectURL = \"http://localhost:3000/api/githublogin\";\nconst path = \"/\";\n\nconst Navbar = () => {\n  _s();\n\n  //const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')));\n  const [user, setUser] = useState();\n  useEffect(() => {\n    (async function () {\n      const usr = await axios.post(`http://localhost:7000/api/githublogin`, {\n        withCredentials: true\n      }).then(res => res.data);\n      setUser(usr);\n    })();\n  }, []); //console.log(user)\n\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const history = useHistory();\n  const classes = useStyles(); // send google token\n\n  const sendGoogleToken = tokenId => {\n    axios.post(`http://localhost:7000/api/googlelogin`, {\n      idToken: tokenId\n    }).then(res => {\n      console.log(res.data);\n      history.push('/project');\n    }).catch(error => {\n      console.log('GOOGLE SIGNIN ERROR', error.response);\n    });\n  };\n\n  const informParent = response => {\n    authenticate(response, () => {\n      isAuth() && isAuth().role === 'admin' ? history.push('/admin') : history.push('/private');\n    });\n  }; // send github token\n\n\n  const sendGithubToken = (client_id, code, client_secret) => {\n    axios.post(`http://localhost:7000/api/githublogin`, {\n      client_id,\n      code,\n      client_secret\n    }).then(res => {\n      console.log(res.data); //informParent(res);\n    }).catch(error => {\n      console.log('GITHUB SIGNIN ERROR', error.response);\n    });\n  }; // handle google\n\n\n  const responseGoogle = response => {\n    const result = response === null || response === void 0 ? void 0 : response.profileObj;\n    const token = response === null || response === void 0 ? void 0 : response.tokenId;\n    console.log(response);\n    sendGoogleToken(response.tokenId);\n    dispatch({\n      type: AUTH,\n      data: {\n        result,\n        token\n      }\n    });\n  };\n\n  const [username, setUsername] = useState(\"\");\n\n  const githubSuccess = async response => {\n    try {\n      sendGithubToken(response.client_secret, response.code, response.client_id);\n      const result = response;\n      const token = response === null || response === void 0 ? void 0 : response.token;\n      console.log(response);\n      dispatch({\n        type: AUTH,\n        data: {\n          result,\n          token\n        }\n      });\n      history.push('/project');\n    } catch (err) {\n      return response.status(500).json({\n        msg: err.message\n      });\n    }\n  };\n\n  const githubFailure = response => console.error(response);\n\n  const logout = () => {\n    localStorage.clear();\n    history.push('/');\n    setUser(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(AppBar, {\n      color: \"white\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"logo\",\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: /*#__PURE__*/_jsxDEV(Toolbar, {\n          className: classes.toolbar,\n          children: !user ? /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://github.com/login/oauth/authorize?client_id=${GITHUB_CLIENT_ID}&redirect_uri=${gitHubRedirectURL}?path=${path}&scope=user:email`,\n            children: \"LOGIN WITH GITHUB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 9\n          }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"Welcome \", user.login]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 2\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 2\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Navbar, \"a4lvZRd6nB2kCt45J6af+Ds+AN4=\", false, function () {\n  return [useDispatch, useLocation, useHistory, useStyles];\n});\n\n_c = Navbar;\nexport default Navbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"sources":["C:/Users/Amira/Desktop/codiPlatform/app/frontend/src/Components/Navbar/Navbar.js"],"names":["React","useState","useEffect","Link","useHistory","useLocation","useDispatch","decode","toast","AUTH","useSelector","GoogleLogin","LoginGithub","axios","authenticate","isAuth","LOGOUT","AppBar","Typography","Toolbar","Avatar","Button","useStyles","logo","GITHUB_CLIENT_ID","gitHubRedirectURL","path","Navbar","user","setUser","usr","post","withCredentials","then","res","data","dispatch","location","history","classes","sendGoogleToken","tokenId","idToken","console","log","push","catch","error","response","informParent","role","sendGithubToken","client_id","code","client_secret","responseGoogle","result","profileObj","token","type","username","setUsername","githubSuccess","err","status","json","msg","message","githubFailure","logout","localStorage","clear","toolbar","login"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAgBC,UAAhB,EAA4BC,WAA5B,QAA+C,kBAA/C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,IAAT,QAAqB,kCAArB;AACA,SAAQC,WAAR,QAA0B,aAA1B,C,CAMA;;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,WAAP,MAAwB,oBAAxB,C,CAGA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,EAAuBC,MAAvB,QAAqC,oBAArC;AACA,SAAQC,MAAR,QAAqB,kCAArB,C,CAGA;;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,OAA7B,EAAsCC,MAAtC,EAA8CC,MAA9C,QAA4D,mBAA5D;AACA,OAAO,cAAP;AACA,OAAOC,SAAP,MAAsB,UAAtB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;AAEA,MAAMC,gBAAgB,GAAG,sBAAzB;AACA,MAAMC,iBAAiB,GAAG,uCAA1B;AACA,MAAMC,IAAI,GAAG,GAAb;;AACA,MAAMC,MAAM,GAAI,MAAO;AAAA;;AAErB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB5B,QAAQ,EAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,kBAAkB;AACjB,YAAM4B,GAAG,GAAG,MAAMjB,KAAK,CACpBkB,IADe,CACT,uCADS,EAC+B;AAC7CC,QAAAA,eAAe,EAAE;AAD4B,OAD/B,EAIfC,IAJe,CAITC,GAAD,IAASA,GAAG,CAACC,IAJH,CAAlB;AAMAN,MAAAA,OAAO,CAACC,GAAD,CAAP;AACD,KARD;AASD,GAVQ,EAUN,EAVM,CAAT,CALqB,CAiBrB;;AACA,QAAMM,QAAQ,GAAG9B,WAAW,EAA5B;AACA,QAAM+B,QAAQ,GAAGhC,WAAW,EAA5B;AACA,QAAMiC,OAAO,GAAGlC,UAAU,EAA1B;AACA,QAAMmC,OAAO,GAAGjB,SAAS,EAAzB,CArBqB,CAyBrB;;AACA,QAAMkB,eAAe,GAAGC,OAAO,IAAI;AACjC5B,IAAAA,KAAK,CACFkB,IADH,CACS,uCADT,EACiD;AAC7CW,MAAAA,OAAO,EAAED;AADoC,KADjD,EAIGR,IAJH,CAIQC,GAAG,IAAI;AACXS,MAAAA,OAAO,CAACC,GAAR,CAAYV,GAAG,CAACC,IAAhB;AACAG,MAAAA,OAAO,CAACO,IAAR,CAAa,UAAb;AACD,KAPH,EAQGC,KARH,CAQSC,KAAK,IAAI;AACdJ,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCG,KAAK,CAACC,QAAzC;AACD,KAVH;AAWD,GAZD;;AAaA,QAAMC,YAAY,GAAGD,QAAQ,IAAI;AAC/BlC,IAAAA,YAAY,CAACkC,QAAD,EAAW,MAAM;AAC3BjC,MAAAA,MAAM,MAAMA,MAAM,GAAGmC,IAAT,KAAkB,OAA9B,GACIZ,OAAO,CAACO,IAAR,CAAa,QAAb,CADJ,GAEIP,OAAO,CAACO,IAAR,CAAa,UAAb,CAFJ;AAGD,KAJW,CAAZ;AAKD,GAND,CAvCqB,CA+CvB;;;AACA,QAAMM,eAAe,GAAG,CAACC,SAAD,EAAYC,IAAZ,EAAkBC,aAAlB,KAAoC;AAC1DzC,IAAAA,KAAK,CACFkB,IADH,CACS,uCADT,EACiD;AAC7CqB,MAAAA,SAD6C;AAE7CC,MAAAA,IAF6C;AAG7CC,MAAAA;AAH6C,KADjD,EAOGrB,IAPH,CAOQC,GAAG,IAAI;AACXS,MAAAA,OAAO,CAACC,GAAR,CAAYV,GAAG,CAACC,IAAhB,EADW,CAEX;AACD,KAVH,EAWGW,KAXH,CAWSC,KAAK,IAAI;AACdJ,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCG,KAAK,CAACC,QAAzC;AACD,KAbH;AAcD,GAfD,CAhDuB,CAgEjB;;;AACA,QAAMO,cAAc,GAAGP,QAAQ,IAAI;AACjC,UAAMQ,MAAM,GAAGR,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAES,UAAzB;AACJ,UAAMC,KAAK,GAAGV,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEP,OAAxB;AACIE,IAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ;AACAR,IAAAA,eAAe,CAACQ,QAAQ,CAACP,OAAV,CAAf;AACAL,IAAAA,QAAQ,CAAC;AAAEuB,MAAAA,IAAI,EAAElD,IAAR;AAAc0B,MAAAA,IAAI,EAAE;AAAEqB,QAAAA,MAAF;AAAUE,QAAAA;AAAV;AAApB,KAAD,CAAR;AAED,GAPD;;AAQA,QAAM,CAACE,QAAD,EAAWC,WAAX,IAA0B5D,QAAQ,CAAC,EAAD,CAAxC;;AAGA,QAAM6D,aAAa,GAAG,MAAMd,QAAN,IAAmB;AACvC,QAAG;AACDG,MAAAA,eAAe,CAACH,QAAQ,CAACM,aAAV,EAAyBN,QAAQ,CAACK,IAAlC,EAAwCL,QAAQ,CAACI,SAAjD,CAAf;AAEA,YAAMI,MAAM,GAAIR,QAAhB;AACA,YAAMU,KAAK,GAAGV,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEU,KAAxB;AAGDf,MAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ;AAECZ,MAAAA,QAAQ,CAAC;AAAEuB,QAAAA,IAAI,EAAElD,IAAR;AAAc0B,QAAAA,IAAI,EAAE;AAAEqB,UAAAA,MAAF;AAAUE,UAAAA;AAAV;AAApB,OAAD,CAAR;AACApB,MAAAA,OAAO,CAACO,IAAR,CAAa,UAAb;AAED,KAZD,CAaA,OAAMkB,GAAN,EAAU;AACR,aAAOf,QAAQ,CAACgB,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAACC,QAAAA,GAAG,EAAEH,GAAG,CAACI;AAAV,OAA1B,CAAP;AAED;AAEF,GAnBD;;AAoBA,QAAMC,aAAa,GAAGpB,QAAQ,IAC7BL,OAAO,CAACI,KAAR,CAAcC,QAAd,CADD;;AAIJ,QAAMqB,MAAM,GAAG,MAAM;AACnBC,IAAAA,YAAY,CAACC,KAAb;AAEAjC,IAAAA,OAAO,CAACO,IAAR,CAAa,GAAb;AAEAhB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAND;;AAWE,sBACI;AAAA,2BACF,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,OAAd;AAAA,8BAEJ;AAAM,QAAA,GAAG,EAAEN,IAAX;AAAiB,QAAA,GAAG,EAAC,MAArB;AAA4B,QAAA,SAAS,EAAC;AAAtC;AAAA;AAAA;AAAA;AAAA,cAFI,eAKL;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,+BAEA,QAAC,OAAD;AAAS,UAAA,SAAS,EAAEgB,OAAO,CAACiC,OAA5B;AAAA,oBACC,CAAC5C,IAAD,gBACM;AACE,YAAA,IAAI,EAAG,sDAAqDJ,gBAAiB,iBAAgBC,iBAAkB,SAAQC,IAAK,mBAD9H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADN,gBAOM;AAAA,mCAAaE,IAAI,CAAC6C,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AARP;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,cALK;AAAA;AAAA;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AAAA,UADJ;AA8BH,CA7ID;;GAAM9C,M;UAkBarB,W,EACAD,W,EACDD,U,EACAkB,S;;;KArBZK,M;AA+IN,eAAeA,MAAf","sourcesContent":["// Ã¯mport package react\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link , useHistory, useLocation } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport decode from 'jwt-decode';\r\nimport { toast } from 'react-toast'\r\nimport { AUTH } from '../../JS/actionsTypes/actionAuth';\r\nimport {useSelector} from 'react-redux'\r\n\r\n\r\n\r\n\r\n\r\n// import google & github login \r\nimport { GoogleLogin } from 'react-google-login';\r\nimport LoginGithub from 'react-login-github';\r\n\r\n\r\n// import axios\r\nimport axios from 'axios';\r\n\r\nimport { authenticate, isAuth } from '../../helpers/auth';\r\nimport {LOGOUT} from '../../JS/actionsTypes/actionAuth';\r\n\r\n\r\n// import CSS\r\nimport { AppBar, Typography, Toolbar, Avatar, Button } from '@material-ui/core'\r\nimport './Navbar.css'\r\nimport useStyles from './styles';\r\n\r\n// import logo\r\nimport logo from \"../../Assets/logo.png\"\r\n\r\nconst GITHUB_CLIENT_ID = \"e8db77544d2e4e9ab741\";\r\nconst gitHubRedirectURL = \"http://localhost:3000/api/githublogin\";\r\nconst path = \"/\";\r\nconst Navbar =  ()  => {\r\n\r\n  //const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')));\r\n  const [user, setUser] = useState();\r\n\r\n  useEffect(() => {\r\n    (async function () {\r\n      const usr = await axios\r\n        .post(`http://localhost:7000/api/githublogin`, {\r\n          withCredentials: true,\r\n        })\r\n        .then((res) => res.data);\r\n\r\n      setUser(usr);\r\n    })();\r\n  }, []);\r\n\r\n  //console.log(user)\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n\r\n\r\n\r\n  // send google token\r\n  const sendGoogleToken = tokenId => {\r\n    axios\r\n      .post(`http://localhost:7000/api/googlelogin`, {\r\n        idToken: tokenId\r\n      })\r\n      .then(res => {\r\n        console.log(res.data);\r\n        history.push('/project')\r\n      })\r\n      .catch(error => {\r\n        console.log('GOOGLE SIGNIN ERROR', error.response);\r\n      });\r\n  };\r\n  const informParent = response => {\r\n    authenticate(response, () => {\r\n      isAuth() && isAuth().role === 'admin'\r\n        ? history.push('/admin')\r\n        : history.push('/private');\r\n    });\r\n  };\r\n\r\n// send github token\r\nconst sendGithubToken = (client_id, code, client_secret) => {\r\n  axios\r\n    .post(`http://localhost:7000/api/githublogin`, {\r\n      client_id, \r\n      code,\r\n      client_secret\r\n      \r\n    })\r\n    .then(res => {\r\n      console.log(res.data);\r\n      //informParent(res);\r\n    })\r\n    .catch(error => {\r\n      console.log('GITHUB SIGNIN ERROR', error.response);\r\n    });\r\n};\r\n      // handle google\r\n      const responseGoogle = response => {\r\n        const result = response?.profileObj;\r\n    const token = response?.tokenId;\r\n        console.log(response);\r\n        sendGoogleToken(response.tokenId);\r\n        dispatch({ type: AUTH, data: { result, token } });\r\n\r\n      };\r\n      const [username, setUsername] = useState(\"\");\r\n\r\n    \r\n      const githubSuccess = async(response) => {\r\n        try{\r\n          sendGithubToken(response.client_secret, response.code, response.client_id)\r\n\r\n          const result =  response;\r\n          const token = response?.token;\r\n  \r\n  \r\n         console.log(response);\r\n  \r\n          dispatch({ type: AUTH, data: { result, token } })\r\n          history.push('/project')\r\n        \r\n        }\r\n        catch(err){\r\n          return response.status(500).json({msg: err.message})\r\n\r\n        }\r\n   \r\n      }\r\n      const githubFailure = response =>\r\n       console.error(response);\r\n      \r\n       \r\n  const logout = () => {\r\n    localStorage.clear();\r\n\r\n    history.push('/');\r\n\r\n    setUser(null);\r\n  };\r\n\r\n\r\n \r\n    \r\n    return (\r\n        <div>\r\n      <AppBar color=\"white\">\r\n {/*logo */}\r\n  <img  src={logo} alt=\"logo\" className=\"logo\"></img>\r\n\r\n {/*button signin  logout */}\r\n <div className='buttons'>\r\n\r\n <Toolbar className={classes.toolbar}>\r\n {!user ? (\r\n        <a\r\n          href={`https://github.com/login/oauth/authorize?client_id=${GITHUB_CLIENT_ID}&redirect_uri=${gitHubRedirectURL}?path=${path}&scope=user:email`}\r\n        >\r\n          LOGIN WITH GITHUB\r\n        </a>\r\n      ) : (\r\n        <h1>Welcome {user.login}</h1>\r\n      )}\r\n             \r\n      </Toolbar>\r\n        </div> \r\n       \r\n          \r\n\r\n\r\n        </AppBar> \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n"]},"metadata":{},"sourceType":"module"}