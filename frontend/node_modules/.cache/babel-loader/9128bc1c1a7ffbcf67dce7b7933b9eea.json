{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amira\\\\Desktop\\\\codiPlatform\\\\app\\\\frontend\\\\src\\\\Components\\\\Auth\\\\Auth.js\";\nimport React from 'react'; // import google & github login \n\nimport { GoogleLogin } from 'react-google-login';\nimport LoginGithub from 'react-login-github'; // import axios\n\nimport axios from 'axios'; // send google token\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst sendGoogleToken = tokenId => {\n  axios.post(`http://localhost:7000/api/googlelogin`, {\n    idToken: tokenId\n  }).then(res => {\n    console.log(res.data);\n    history.push('/project');\n  }).catch(error => {\n    console.log('GOOGLE SIGNIN ERROR', error.response);\n  });\n};\n\nconst informParent = response => {\n  authenticate(response, () => {\n    isAuth() && isAuth().role === 'admin' ? history.push('/admin') : history.push('/private');\n  });\n}; // send github token\n\n\nconst sendGithubToken = (client_id, code, client_secret) => {\n  axios.post(`http://localhost:7000/api/githublogin`, {\n    client_id,\n    code,\n    client_secret\n  }).then(res => {\n    console.log(res.data); //informParent(res);\n  }).catch(error => {\n    console.log('GITHUB SIGNIN ERROR', error.response);\n  });\n}; // handle google\n\n\nconst responseGoogle = response => {\n  const result = response === null || response === void 0 ? void 0 : response.profileObj;\n  const token = response === null || response === void 0 ? void 0 : response.tokenId;\n  console.log(response);\n  sendGoogleToken(response.tokenId);\n  dispatch({\n    type: AUTH,\n    data: {\n      result,\n      token\n    }\n  });\n};\n\nconst responseGoogleFailure = () => alert('Google Sign In was unsuccessful. Try again later'); // handle Github\n\n\nconst githubSuccess = async response => {\n  try {\n    const {\n      client_secret,\n      code,\n      client_id\n    } = response;\n    const res = await axios.post(`http://localhost:7000/api/githublogin`, {\n      client_secret,\n      code,\n      client_id\n    }); //sendGithubToken(response.client_secret, response.code, response.client_id)\n    //console.log(res)\n\n    const result = res.data;\n    console.log(result);\n    const token = response === null || response === void 0 ? void 0 : response.token;\n    dispatch({\n      type: AUTH,\n      data: {\n        result,\n        token\n      }\n    });\n    history.push('/project');\n  } catch (err) {\n    err.response.data.msg && setUser({ ...user,\n      err: err.response.data.msg,\n      success: ''\n    });\n  }\n};\n\nconst githubFailure = response => alert('Github Sign In was unsuccessful. Try again later');\n\nconst Auth = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GoogleLogin, {\n      clientId: \"998922049920-3bhfhk05ff2nb9ivp1h811hhin6ilkgk.apps.googleusercontent.com\",\n      onSuccess: googleSuccess,\n      onFailure: googleError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LoginGithub, {\n      clientId: `e8db77544d2e4e9ab741`,\n      buttonText: \"Login with Github\",\n      onSuccess: githubSuccess,\n      onFailure: githubFailure,\n      className: \"icon-github\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Auth;\nexport default Auth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["C:/Users/Amira/Desktop/codiPlatform/app/frontend/src/Components/Auth/Auth.js"],"names":["React","GoogleLogin","LoginGithub","axios","sendGoogleToken","tokenId","post","idToken","then","res","console","log","data","history","push","catch","error","response","informParent","authenticate","isAuth","role","sendGithubToken","client_id","code","client_secret","responseGoogle","result","profileObj","token","dispatch","type","AUTH","responseGoogleFailure","alert","githubSuccess","err","msg","setUser","user","success","githubFailure","Auth","googleSuccess","googleError"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\n\r\n// import google & github login \r\nimport { GoogleLogin } from 'react-google-login';\r\nimport LoginGithub from 'react-login-github';\r\n\r\n\r\n// import axios\r\nimport axios from 'axios';\r\n\r\n\r\n  // send google token\r\n  const sendGoogleToken = tokenId => {\r\n    axios\r\n      .post(`http://localhost:7000/api/googlelogin`, {\r\n        idToken: tokenId\r\n      })\r\n      .then(res => {\r\n        console.log(res.data);\r\n        history.push('/project')\r\n      })\r\n      .catch(error => {\r\n        console.log('GOOGLE SIGNIN ERROR', error.response);\r\n      });\r\n  };\r\n  const informParent = response => {\r\n    authenticate(response, () => {\r\n      isAuth() && isAuth().role === 'admin'\r\n        ? history.push('/admin')\r\n        : history.push('/private');\r\n    });\r\n  };\r\n\r\n// send github token\r\nconst sendGithubToken = (client_id, code, client_secret) => {\r\n  axios\r\n    .post(`http://localhost:7000/api/githublogin`, {\r\n      client_id, \r\n      code,\r\n      client_secret\r\n      \r\n    })\r\n    .then(res => {\r\n      console.log(res.data);\r\n      //informParent(res);\r\n    })\r\n    .catch(error => {\r\n      console.log('GITHUB SIGNIN ERROR', error.response);\r\n    });\r\n};\r\n      // handle google\r\n      const responseGoogle = response => {\r\n        const result = response?.profileObj;\r\n    const token = response?.tokenId;\r\n        console.log(response);\r\n        sendGoogleToken(response.tokenId);\r\n        dispatch({ type: AUTH, data: { result, token } });\r\n\r\n      };\r\n\r\n     const responseGoogleFailure  = () => \r\n     alert('Google Sign In was unsuccessful. Try again later');\r\n\r\n\r\n\r\n     // handle Github\r\n      const githubSuccess = async(response) => {\r\n        try{\r\n            const { client_secret, code, client_id} = response\r\n            const res = await axios.post(`http://localhost:7000/api/githublogin`, \r\n            {client_secret, code, client_id})\r\n          //sendGithubToken(response.client_secret, response.code, response.client_id)\r\n//console.log(res)\r\n          const result =res.data;\r\n          console.log(result)\r\n\r\n  \r\n          const token = response?.token;\r\n\r\n          dispatch({ type: AUTH, data: { result, token } })\r\n\r\n          history.push('/project')\r\n        \r\n        }\r\n        catch (err) {\r\n          err.response.data.msg && \r\n          setUser({...user, err: err.response.data.msg, success: ''})\r\n      }\r\n      }\r\n      const githubFailure = response =>\r\n      alert('Github Sign In was unsuccessful. Try again later');\r\n\r\nconst Auth = () => {\r\n  return (\r\n    <div>\r\n      \r\n      <GoogleLogin\r\n          clientId=\"998922049920-3bhfhk05ff2nb9ivp1h811hhin6ilkgk.apps.googleusercontent.com\"\r\n          onSuccess={googleSuccess}\r\n          onFailure={googleError}\r\n          \r\n/>  \r\n      <LoginGithub\r\n          clientId={`e8db77544d2e4e9ab741`}\r\n          buttonText=\"Login with Github\"\r\n          onSuccess={githubSuccess}\r\n          onFailure={githubFailure}\r\n          className=\"icon-github\"\r\n        \r\n   ></LoginGithub>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Auth\r\n"]},"metadata":{},"sourceType":"module"}