{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Amira\\\\Desktop\\\\codiPlatform\\\\app\\\\frontend\\\\src\\\\Components\\\\Auth\\\\Auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Auth = () => {\n  _s();\n\n  const {\n    state,\n    dispatch\n  } = useContext();\n  const [data, setData] = useState({\n    errorMessage: \"\",\n    isLoading: false\n  });\n  const {\n    client_id,\n    redirect_uri\n  } = state;\n  useEffect(() => {\n    // After requesting Github access, Github redirects back to your app with a code parameter\n    const url = window.location.href;\n    const hasCode = url.includes(\"?code=\"); // If Github API returns the code parameter\n\n    if (hasCode) {\n      const newUrl = url.split(\"?code=\");\n      window.history.pushState({}, null, newUrl[0]);\n      setData({ ...data,\n        isLoading: true\n      });\n      const requestData = {\n        code: newUrl[1]\n      };\n      const proxy_url = state.proxy_url; // Use code parameter and other parameters to make POST request to proxy_server\n\n      fetch(proxy_url, {\n        method: \"POST\",\n        body: JSON.stringify(requestData)\n      }).then(response => response.json()).then(data => {\n        dispatch({\n          type: \"LOGIN\",\n          payload: {\n            user: data,\n            isLoggedIn: true\n          }\n        });\n      }).catch(error => {\n        setData({\n          isLoading: false,\n          errorMessage: \"Sorry! Login failed\"\n        });\n      });\n    }\n  }, [state, dispatch, data]);\n\n  if (state.isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 14\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Super amazing app\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: data.errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-container\",\n      children: data.isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loader\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"login-link\",\n          href: `https://github.com/login/oauth/authorize?scope=user&client_id=${client_id}&redirect_uri=${redirect_uri}`,\n          onClick: () => {\n            setData({ ...data,\n              errorMessage: \"\"\n            });\n          },\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Login with GitHub\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Auth, \"cRBYZQP+OoZd1eTh46pKE5WPS7Q=\");\n\n_c = Auth;\nexport default Auth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["C:/Users/Amira/Desktop/codiPlatform/app/frontend/src/Components/Auth/Auth.js"],"names":["React","useState","useEffect","useContext","Redirect","Auth","state","dispatch","data","setData","errorMessage","isLoading","client_id","redirect_uri","url","window","location","href","hasCode","includes","newUrl","split","history","pushState","requestData","code","proxy_url","fetch","method","body","JSON","stringify","then","response","json","type","payload","user","isLoggedIn","catch","error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst Auth = () => {\r\n\r\n    const { state, dispatch } = useContext();\r\n    const [data, setData] = useState({ errorMessage: \"\", isLoading: false });\r\n  \r\n    const { client_id, redirect_uri } = state;\r\n  \r\n    useEffect(() => {\r\n      // After requesting Github access, Github redirects back to your app with a code parameter\r\n      const url = window.location.href;\r\n      const hasCode = url.includes(\"?code=\");\r\n  \r\n      // If Github API returns the code parameter\r\n      if (hasCode) {\r\n        const newUrl = url.split(\"?code=\");\r\n        window.history.pushState({}, null, newUrl[0]);\r\n        setData({ ...data, isLoading: true });\r\n  \r\n        const requestData = {\r\n          code: newUrl[1]\r\n        };\r\n  \r\n        const proxy_url = state.proxy_url;\r\n  \r\n        // Use code parameter and other parameters to make POST request to proxy_server\r\n        fetch(proxy_url, {\r\n          method: \"POST\",\r\n          body: JSON.stringify(requestData)\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            dispatch({\r\n              type: \"LOGIN\",\r\n              payload: { user: data, isLoggedIn: true }\r\n            });\r\n          })\r\n          .catch(error => {\r\n            setData({\r\n              isLoading: false,\r\n              errorMessage: \"Sorry! Login failed\"\r\n            });\r\n          });\r\n      }\r\n    }, [state, dispatch, data]);\r\n  \r\n    if (state.isLoggedIn) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n  \r\n    return (\r\n        <div>\r\n          <h1>Welcome</h1>\r\n          <span>Super amazing app</span>\r\n          <span>{data.errorMessage}</span>\r\n          <div className=\"login-container\">\r\n            {data.isLoading ? (\r\n              <div className=\"loader-container\">\r\n                <div className=\"loader\"></div>\r\n              </div>\r\n            ) : (\r\n              <>\r\n                {\r\n                  // Link to request GitHub access\r\n                }\r\n                <a\r\n                  className=\"login-link\"\r\n                  href={`https://github.com/login/oauth/authorize?scope=user&client_id=${client_id}&redirect_uri=${redirect_uri}`}\r\n                  onClick={() => {\r\n                    setData({ ...data, errorMessage: \"\" });\r\n                  }}\r\n                >\r\n             \r\n                  <span>Login with GitHub</span>\r\n                </a>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth\r\n"]},"metadata":{},"sourceType":"module"}